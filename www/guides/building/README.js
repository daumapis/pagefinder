Ext.data.JsonP.building({"guide":"<h1 id='building-section-using-and-creating-builds'>Using and Creating Builds</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/building-section-choosing-a-build'>Choosing a Build</a></li>\n<li><a href='#!/guide/building-section-creating-your-own-build'>Creating Your Own Build</a></li>\n</ol>\n</div>\n\n<p>Sencha Touch comes with a class system that features the ability to dynamically load classes when they are needed.\nThis approach has many benefits in both development and production.</p>\n\n<p>In development, dynamic loading means that you get a file-by-file stack trace, which makes it much easier to\ndebug problems with your application. For production, we provide a build tool that enables you to easily create\na minified custom build that only includes the classes your app actually uses, meaning loading times are often\nreduced for your users.</p>\n\n<h2 id='building-section-choosing-a-build'>Choosing a Build</h2>\n\n<p>Sencha Touch ships with five builds out of the box. If you want to get up and running as quickly as possible,\nit is best to use sencha-touch-debug.js while developing your app locally, then switch to sencha-touch.js\nin production. The other three builds are good for debugging in production, running in production without a\ncustom build, and migrating your Touch 1.x app to 2.x.</p>\n\n<p>Because each build is used for a different purpose and is created using a different set of build options,\nwe have created a table that details the configuration of each one:</p>\n\n\n\n\n\n<table class=\"info\">\n    <tr>\n        <th>Name</th>\n        <th>Type</th>\n        <th>Loader</th>\n        <th>Minified</th>\n        <th>Comments</th>\n        <th>Debug</th>\n        <th>Compat</th>\n        <th>Usage</th>\n    </tr>\n    <tr>\n        <th>sencha-touch-debug.js</th>\n        <td>Core</td>\n        <td><p class='screenshot'><img src='guides/building/tick.png' alt=''><span></span></p></td>\n        <td></td>\n        <td><p class='screenshot'><img src='guides/building/tick.png' alt=''><span></span></p></td>\n        <td><p class='screenshot'><img src='guides/building/tick.png' alt=''><span></span></p></td>\n        <td></td>\n        <td>Use when developing your app locally</td>\n    </tr>\n    <tr>\n        <th>sencha-touch.js</th>\n        <td>Core</td>\n        <td></td>\n        <td><p class='screenshot'><img src='guides/building/tick.png' alt=''><span></span></p></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>Use in production with a custom build</td>\n    </tr>\n    <tr>\n        <th>builds/sencha-touch-all.js</th>\n        <td>All</td>\n        <td></td>\n        <td><p class='screenshot'><img src='guides/building/tick.png' alt=''><span></span></p></td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>Use in production if you don't have a custom build</td>\n    </tr>\n    <tr>\n        <th>builds/sencha-touch-all-debug.js</th>\n        <td>All</td>\n        <td></td>\n        <td></td>\n        <td><p class='screenshot'><img src='guides/building/tick.png' alt=''><span></span></p></td>\n        <td><p class='screenshot'><img src='guides/building/tick.png' alt=''><span></span></p></td>\n        <td></td>\n        <td>Use to debug your app in staging/production</td>\n    </tr>\n    <tr>\n        <th>builds/sencha-touch-all-compat.js</th>\n        <td>All</td>\n        <td></td>\n        <td></td>\n        <td><p class='screenshot'><img src='guides/building/tick.png' alt=''><span></span></p></td>\n        <td><p class='screenshot'><img src='guides/building/tick.png' alt=''><span></span></p></td>\n        <td><p class='screenshot'><img src='guides/building/tick.png' alt=''><span></span></p></td>\n        <td>Use to migrate your 1.x app to 2.x</td>\n    </tr>\n</table>\n\n\n<p><strong>Note</strong> The last 3 builds are contained within the 'builds' directory in the SDK download.\nThe following list provides additional detail on each option:</p>\n\n<ul>\n    <li><strong>Type</strong> - Either \"Core\" or \"All\" - Core includes the base classes but none of the Components, All means everything is included</li>\n    <li><strong>Loader</strong> - Whether dynamic loading is activated or not. Only sencha-touch-debug.js has this activated by default</li>\n    <li><strong>Minified</strong> - Indicates that the build has been compressed with a YUI (Yahoo user interface) compressor</li>\n    <li><strong>Comments</strong> - Indicates that the build still contains the JSDoc comments (these are usually stripped in production to speed up downloads)</li>\n    <li><strong>Debug</strong> - Indicates that the build provides debug messages, such as if you misconfigured a class</li>\n    <li><strong>Compat</strong> - Indicates that the code provides backwards compatibility in the build with Sencha Touch 1.x</li>\n</ul>\n\n\n<p>Use sencha-touch-debug.js in development mode, then in production switch to\neither sencha-touch.js or sencha-touch-all.js plus a custom build.</p>\n\n<h2 id='building-section-creating-your-own-build'>Creating Your Own Build</h2>\n\n<p>In the vast majority of cases a Sencha Touch app should use a custom build in production, for two main reasons:</p>\n\n<ol>\n<li>Custom builds include <strong>only</strong> the framework classes that your app is actually using, saving on download time</li>\n<li>A custom build includes all of your app classes in a single file, which translates into a single network request</li>\n</ol>\n\n\n<p>For deployed applications, the second reason is most important. Since most applications have\na large number of files (sometimes hundreds), loading them one by one, especially over a\nmobile connection, can take a long time. Each request can add several hundred milliseconds\nof delay which can easily add several seconds to your application's overall load time.</p>\n\n<p>To load your applications quickly in a production environment, use Sencha's command line\nbuild tool, <a href=\"http://www.sencha.com/products/sencha-cmd/download\">Sencha Cmd</a>, which:</p>\n\n<ol>\n<li>Determines framework classes your application uses</li>\n<li>Loads application classes when your application starts</li>\n<li>Combines all of classes into a single file, with the classes in the correct order</li>\n<li>Strips out all of the JSDoc comments and minifies the file to be as small as possible</li>\n</ol>\n\n\n<h3 id='building-section-installing-sencha-cmd'>Installing Sencha Cmd</h3>\n\n<p>Ensure that you download and install <a href=\"http://www.sencha.com/products/sencha-cmd/download\">Sencha Cmd</a>.</p>\n\n<h3 id='building-section-generating-a-build'>Generating a Build</h3>\n\n<p>We are going to assume that you have an app that already works locally and that you\njust want to build it for production. If you do not have an app yet or do not know\nhow to create one, check out the <a href=\"#!/guide/getting_started\">getting started guide</a>.</p>\n\n<p>Assuming that your app works locally, let us proceed. To illustrate how this works,\nwe are going to use the Twitter example that comes with the Sencha Touch SDK.\nTake a look at the example's index.html file:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;\n    &lt;title&gt;Twitter&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"resources/css/application.css\" type=\"text/css\"&gt;\n\n    &lt;script type=\"text/javascript\" src=\"touch/sencha-touch-debug.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>Note</strong> We load sencha-touch-debug.js and app.js, which allows us to use dynamic loading while\ndeveloping our app. This is the basis for the Sencha Cmd's ability to generate a minimal build.</p>\n\n<p>At the command line, change directory to the hard drive directory that contains your app:</p>\n\n<pre><code>cd ~/path/to/my/app\n</code></pre>\n\n<p>To generate a build compatible with the native packager, use one of the following:\n* <strong>sencha app build native</strong><br>\n  Builds the app and prepares a file called packager.temp.json that you can use to package an application--the packager.temp.json is the same as packager.json, but contains additional paths. Use the <strong>sencha app package run packager.temp.json</strong> command to run the packager and launch a simulator.\n* <strong>sencha app build native -run</strong><br>\n  Builds and automatically packages the application, and launches the appropriate simulator\n* <strong>sencha app build package</strong><br>\n   * Builds the app with packaging support, but does not configure a packager JSON file. Â This is useful for projects that manually maintain multiple packager.json files (android.json, ios.json, etc.).\n   * Useful for continuous integration builds where the build may be run once, then packaged multiple times, for example:</p>\n\n<pre><code>  * **sencha app build package**\n  * **sencha app package build android.json**\n  * **sencha app package build ios.json**\n</code></pre>\n\n<h3 id='building-section-updating-your-html-file'>Updating your HTML file</h3>\n\n<p>The final step for preparing your app for production is to update your HTML file to use sencha-touch.js\ninstead of sencha-touch-debug.js, and to load your newly-generated all-classes.js file.\nThe twitter example file ends up as follows:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;\n    &lt;title&gt;Twitter&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"resources/css/application.css\" type=\"text/css\"&gt;\n\n    &lt;script type=\"text/javascript\" src=\"touch/sencha-touch.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"all-classes.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Rather than change your main index.html file all the time, it is common to create a duplicate called index-production.html that looks like the previous file. Many developers produce a simple deploy script that automatically copies the app into a deploy folder and rename index-production.html to index.html, such that the build can be uploaded.</p>\n","title":"Using and Creating Builds"});