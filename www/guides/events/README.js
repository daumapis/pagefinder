Ext.data.JsonP.events({"guide":"<h1 id='events-section-understanding-and-using-events-in-sencha-touch'>Understanding and Using Events in Sencha Touch</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/events-section-what-are-events-'>What Are Events?</a></li>\n<li><a href='#!/guide/events-section-listening-to-events'>Listening to Events</a></li>\n<li><a href='#!/guide/events-section-config-driven-events'>Config-driven Events</a></li>\n<li><a href='#!/guide/events-section-adding-listeners-later'>Adding Listeners Later</a></li>\n<li><a href='#!/guide/events-section-removing-listeners'>Removing Listeners</a></li>\n<li><a href='#!/guide/events-section-listener-options'>Listener Options</a></li>\n<li><a href='#!/guide/events-section-firing-your-own-events'>Firing Your Own Events</a></li>\n<li><a href='#!/guide/events-section-conclusions'>Conclusions</a></li>\n</ol>\n</div>\n\n<p>The Components and classes of Sencha Touch fire a broad range of events at various points in their lifecycle. Events allow your code to react to changes around it and are a key concept within Sencha Touch.</p>\n\n<h2 id='events-section-what-are-events-'>What Are Events?</h2>\n\n<p>Events are fired whenever something interesting happens to one of your classes. For example, when any Component is rendered to the screen, its <a href=\"#!/api/Ext.Component-event-painted\" rel=\"Ext.Component-event-painted\" class=\"docClass\">painted</a> event is fired. We can listen for that event by configuring a simple <a href=\"#!/api/Ext.mixin.Observable-cfg-listeners\" rel=\"Ext.mixin.Observable-cfg-listeners\" class=\"docClass\">listeners</a> config:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.Panel\" rel=\"Ext.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    html: 'My Panel',\n    fullscreen: true,\n\n    listeners: {\n        painted: function() {\n            <a href=\"#!/api/Ext.Msg-method-alert\" rel=\"Ext.Msg-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('I was painted to the screen');\n        }\n    }\n});\n</code></pre>\n\n<p>When you click the \"Live Preview\" button above, you will see a Panel rendered to the screen, followed by the defined alert message. All events fired by a class are listed in its API page - for example at the time of writing <a href=\"#!/api/Ext.Panel\" rel=\"Ext.Panel\" class=\"docClass\">Ext.Panel</a> has 28 events:</p>\n\n<p><a href=\"#!/api/Ext.Panel\"><p class='screenshot'><img src='guides/events/event-list.png' alt='Hover over the Events button to quickly see which events are available'><span>Hover over the Events button to quickly see which events are available</span></p></a></p>\n\n<h2 id='events-section-listening-to-events'>Listening to Events</h2>\n\n<p>Although the painted event itself is useful in some cases, there are other events that you are much more likely to use. For example, <a href=\"#!/api/Ext.Button\" rel=\"Ext.Button\" class=\"docClass\">Buttons</a> fire <a href=\"#!/api/Ext.Button-event-tap\" rel=\"Ext.Button-event-tap\" class=\"docClass\">tap</a> events whenever they are tapped on:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n    xtype: 'button',\n    centered: true,\n    text: 'My Button',\n\n    listeners: {\n        tap: function() {\n            alert(\"You tapped me\");\n        }\n    }\n});\n</code></pre>\n\n<p>You can add as many event listeners as you like. In the following example we are going to confound users by calling <em>this.hide()</em> inside our tap listener to hide the Button, only to show it again a second later. When <em>this.hide()</em> is called, the Button is hidden and the <a href=\"#!/api/Ext.Button-event-hide\" rel=\"Ext.Button-event-hide\" class=\"docClass\">hide event</a> fired. The hide event in turn triggers our hide listener, which waits for a second before it shows the Button again:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n    xtype: 'button',\n    centered: true,\n    text: 'My Button',\n\n    listeners: {\n        tap: function() {\n            this.hide();\n        },\n        hide: function() {\n            //waits 1 second (1000ms) then shows the button again\n            <a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a>(function() {\n                this.show();\n            }, 1000, this);\n        }\n    }\n});\n</code></pre>\n\n<p>Event listeners are called every time an event is fired, so you can continue hiding and showing the button for all eternity.</p>\n\n<h2 id='events-section-config-driven-events'>Config-driven Events</h2>\n\n<p>Most classes are reconfigurable at run time, meaning that you can change their configurations such as height, width, or content at any time and the Component will correctly update itself on screen. Many of these configuration changes trigger the firing of an event - for example 14 of the Button's component 24 events have names such as <a href=\"#!/api/Ext.Button-event-widthchange\" rel=\"Ext.Button-event-widthchange\" class=\"docClass\">widthchange</a>, <a href=\"#!/api/Ext.Button-event-hiddenchange\" rel=\"Ext.Button-event-hiddenchange\" class=\"docClass\">hiddenchange</a> and <a href=\"#!/api/Ext.Button-event-centeredchange\" rel=\"Ext.Button-event-centeredchange\" class=\"docClass\">centeredchange</a>.</p>\n\n<p>In the following example the tap handler calls this.setWidth() to set a random width on our button. The <a href=\"#!/api/Ext.Button-event-widthchange\" rel=\"Ext.Button-event-widthchange\" class=\"docClass\">widthchange</a> listener is informed immediately of the change, along with the new and old width values:</p>\n\n<pre class='inline-example '><code><a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n    xtype: 'button',\n    centered: true,\n    text: 'Click me',\n\n    listeners: {\n        tap: function() {\n            var randomWidth = 100 + Math.round(Math.random() * 200);\n\n            this.setWidth(randomWidth);\n        },\n        widthchange: function(button, newWidth, oldWidth) {\n            alert('My width changed from ' + oldWidth + ' to ' + newWidth);\n        }\n    }\n});\n</code></pre>\n\n<p>Every event that ends in 'change' is fired as a result of a config option that has changed. Note that although listening to these events is like listening to any other events, it is useful to know the convention.</p>\n\n<h2 id='events-section-adding-listeners-later'>Adding Listeners Later</h2>\n\n<p>Previous examples involved passing listeners in when the class is instantiated. If we already have an instance though, we can still add listeners later on using the <a href=\"#!/api/Ext.mixin.Observable-method-on\" rel=\"Ext.mixin.Observable-method-on\" class=\"docClass\">on</a> function:</p>\n\n<pre class='inline-example '><code>var myButton = <a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n    xtype: 'button',\n    centered: true,\n    text: 'Click me'\n});\n\nmyButton.on('tap', function() {\n    alert(\"Event listener attached by .on\");\n});\n</code></pre>\n\n<p>In this way you can add new listeners at any time. You can also combine these approaches, and you can even listen to the same event more than once, if you need to, as shown in the following example:</p>\n\n<pre class='inline-example '><code>var myButton = <a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n    xtype: 'button',\n    centered: true,\n    text: 'Click me',\n\n    listeners: {\n        tap: function() {\n            alert('First tap listener');\n        }\n    }\n});\n\nmyButton.on('tap', function() {\n    alert(\"Second tap listener\");\n});\n</code></pre>\n\n<p>In this case, both defined event listener functions are called, preserving the order they were added in.</p>\n\n<p>Finally, you can specify multiple listeners by using the .on method, similar to using a listener configuration. The following code revisits the previous example that was setting the button's random width:</p>\n\n<pre class='inline-example '><code>var myButton = <a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n    xtype: 'button',\n    centered: true,\n    text: 'Click me'\n});\n\nmyButton.on({\n    tap: function() {\n        var randomWidth = 100 + Math.round(Math.random() * 200);\n\n        this.setWidth(randomWidth);\n    },\n    widthchange: function(button, newWidth, oldWidth) {\n        alert('My width changed from ' + oldWidth + ' to ' + newWidth);\n    }\n});\n</code></pre>\n\n<h2 id='events-section-removing-listeners'>Removing Listeners</h2>\n\n<p>Just as we can add listeners at any time, we can remove them too, this time using <a href=\"#!/api/Ext.mixin.Observable-method-un\" rel=\"Ext.mixin.Observable-method-un\" class=\"docClass\">un</a>. In order to remove a listener, we need a reference to its function. In the previous examples we have just passed a function into the listeners object or the .on call, this time we create the function earlier and link it into a variable called <em>doSomething</em>.</p>\n\n<p>Since initially we pass the new <em>doSomething</em> function into our listeners object, at first the code works like before. Since we eventually add an <a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a> function that removes the listener after 3 seconds, clicking on the button in the first 3 seconds yields an alert message, after 3 seconds however the listener is removed so nothing happens:</p>\n\n<pre class='inline-example '><code>var doSomething = function() {\n    alert('handler called');\n};\n\nvar myButton = <a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n    xtype: 'button',\n    text: 'My Button',\n    centered: true,\n\n    listeners: {\n        tap: doSomething\n    }\n});\n\n<a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a>(function() {\n    myButton.un('tap', doSomething);\n}, 3000);\n</code></pre>\n\n<p>In the following example we use a button like in previous code samples, but this time we also add a toggle button that adds and removes the tap listener as you toggle it. The listener starts by being disabled, using the toggle button enables and then disables it:</p>\n\n<pre class='inline-example '><code>var myButton = <a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n    xtype: 'button',\n    centered: true,\n    text: 'Listener Disabled'\n});\n\nvar handler = function() {\n    alert('listener called');\n};\n\n<a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n    xtype: 'togglefield',\n    docked: 'bottom',\n    label: 'Toggle Listener',\n\n    listeners: {\n        change: function(field, thumb, enabled) {\n            if (enabled) {\n                myButton.on('tap', handler);\n                myButton.setText('Listener Enabled');\n            } else {\n                myButton.un('tap', handler);\n                myButton.setText('Listener Disabled');\n            }\n        }\n    }\n});\n</code></pre>\n\n<h2 id='events-section-listener-options'>Listener Options</h2>\n\n<p>There are a number of additional options that you can pass into listeners.</p>\n\n<h3 id='events-section-scope'>Scope</h3>\n\n<p>Scope sets the value of <em>this</em> inside your handler function. By default <em>this</em> is set to the instance of the class firing the event, which is often (but not always) the functionality that you want. This functionality allowed us to call <em>this.hide()</em> to hide the button in the second example at the start of this guide.</p>\n\n<p>In the following example we create a Button and a Panel, then listen to the Button's 'tap' event with the handler running in Panel's scope. In order to do this we need to pass in an object instead of a handler function - this object contains the function plus the scope:</p>\n\n<pre class='inline-example '><code>var myButton = <a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n    xtype: 'button',\n    centered: true,\n    text: 'Click me'\n});\n\nvar panel = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.Panel\" rel=\"Ext.Panel\" class=\"docClass\">Ext.Panel</a>', {\n    html: 'Panel HTML'\n});\n\nmyButton.on({\n    tap: {\n        scope: panel,\n        fn: function() {\n            alert(\"Running in Panel's scope\");\n            alert(this.getHtml());\n        }\n    }\n});\n</code></pre>\n\n<p>When you run this example, the value of <em>this</em> in the tap handler is the Panel. To see this we have set the Panel's <a href=\"#!/api/Ext.Panel-cfg-html\" rel=\"Ext.Panel-cfg-html\" class=\"docClass\">html</a> configuration to 'Panel HTML' and then alerted this.getHtml() in our handler. When  the button is tapped we do indeed see the Panel's html being alerted.</p>\n\n<h3 id='events-section-single'>Single</h3>\n\n<p>Sometimes we only want to listen to an event one time. The event itself might fire any number of times, but we only want to listen to it once. The following codes illustrates this situation:</p>\n\n<pre class='inline-example '><code>var myButton = <a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n   xtype: 'button',\n   centered: true,\n   text: 'Click me',\n\n   listeners: {\n       tap: {\n           single: true,\n           fn: function() {\n               alert(\"I will say this only once\");\n           }\n       }\n   }\n});\n</code></pre>\n\n<h3 id='events-section-buffer'>Buffer</h3>\n\n<p>For events that are fired many times in short succession, we can reduce the number of times our listener is called by using the buffer configuration. In this case our button's tap listener is only invoked once every 2 seconds, regardless of how many times you click it:</p>\n\n<pre class='inline-example '><code>var myButton = <a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n   xtype: 'button',\n   centered: true,\n   text: 'Click me',\n\n   listeners: {\n       tap: {\n           buffer: 2000,\n           fn: function() {\n               alert(\"I will say this only once every 2 seconds\");\n           }\n       }\n   }\n});\n</code></pre>\n\n<h2 id='events-section-firing-your-own-events'>Firing Your Own Events</h2>\n\n<p>Firing your own events is done by calling <a href=\"#!/api/Ext.mixin.Observable-method-fireEvent\" rel=\"Ext.mixin.Observable-method-fireEvent\" class=\"docClass\">fireEvent</a> with any event name. In the following example we fire an event called <em>myEvent</em> that passes two arguments - the button itself and a random number between 1 and 100:</p>\n\n<pre class='inline-example '><code>var myButton = <a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n   xtype: 'button',\n   centered: true,\n   text: \"Just wait 2 seconds\",\n\n   listeners: {\n       myEvent: function(button, points) {\n           alert('myEvent was fired! You score ' + points + ' points');\n       }\n   }\n});\n\n<a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a>(function() {\n    var number = Math.ceil(Math.random() * 100);\n\n    myButton.fireEvent('myEvent', myButton, number);\n}, 2000);\n</code></pre>\n\n<p>Once again we used <a href=\"#!/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\">Ext.defer</a> to delay the function that fires our custom event, this time by 2 seconds. When the event is fired, the myEvent listener picks up on it and displays the arguments we passed in.</p>\n\n<h2 id='events-section-conclusions'>Conclusions</h2>\n\n<p>Events are a key part of Sencha Touch and keep your app informed of changes in the system. If you are new to Sencha Touch we suggest reading the following guides to get a better understanding of how everything works:</p>\n\n<ul>\n<li><a href=\"#!/guide/components\">Understanding Components</a></li>\n<li><a href=\"#!/guide/class_system\">Understanding the Class System</a></li>\n</ul>\n\n","title":"Events"});