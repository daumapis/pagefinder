Ext.data.JsonP.first_app({"guide":"<h1 id='first_app-section-building-your-first-app'>Building Your First App</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/first_app-section-preparation'>Preparation</a></li>\n<li><a href='#!/guide/first_app-section-what-we-are-going-to-build'>What We Are Going to Build</a></li>\n<li><a href='#!/guide/first_app-section-getting-started'>Getting Started</a></li>\n<li><a href='#!/guide/first_app-section-adding-the-blogs-page'>Adding the Blogs Page</a></li>\n<li><a href='#!/guide/first_app-section-creating-a-contact-form'>Creating a Contact Form</a></li>\n<li><a href='#!/guide/first_app-section-putting-it-all-together'>Putting It All Together</a></li>\n</ol>\n</div>\n\n<h2 id='first_app-section-preparation'>Preparation</h2>\n\n<p>This guide builds on the <a href=\"#!/guide/getting_started\">Getting Started Guide</a>, which gets you set up with the Sencha Touch SDK installation and ensures that your environment is functional. If you have not read the Getting Started Guide, please read it before using this guide.</p>\n\n<h2 id='first_app-section-what-we-are-going-to-build'>What We Are Going to Build</h2>\n\n<p>We are going to build a simple mobile web app to use for a company's mobile site. The app includes a home page, a contact form, and a simple list that fetches our recent blog posts and allows visitors to read them on a mobile device.</p>\n\n<p>The sample app's code is the following (the following code is interactive):</p>\n\n<pre class='inline-example raw portrait preview'><code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>({\n    name: 'Sencha',\n\n    launch: function() {\n        // The whole app UI lives in this tab panel\n        <a href=\"#!/api/Ext.Viewport-event-add\" rel=\"Ext.Viewport-event-add\" class=\"docClass\">Ext.Viewport.add</a>({\n            xtype: 'tabpanel',\n            fullscreen: true,\n            tabBarPosition: 'bottom',\n\n            items: [\n                // This is the home page, just some simple HTML\n                {\n                    title: 'Home',\n                    iconCls: 'home',\n                    cls: 'home',\n                    html: [\n                        '&lt;img height=260 src=\"http://staging.sencha.com/img/sencha.png\" /&gt;',\n                        '&lt;h1&gt;Welcome to Sencha Touch&lt;/h1&gt;',\n                        \"&lt;p&gt;Building the Getting Started app.&lt;/p&gt;\",\n                        '&lt;h2&gt;Sencha Touch&lt;/h2&gt;'\n                    ].join(\"\")\n                },\n\n                // This is the recent blogs page. It uses a tree store to load its data from blog.json.\n                {\n                    xtype: 'nestedlist',\n                    title: 'Blog',\n                    iconCls: 'star',\n                    cls: 'blog',\n                    displayField: 'title',\n\n                    store: {\n                        type: 'tree',\n\n                        fields: ['title', 'link', 'author', 'contentSnippet', 'content', {\n                            name: 'leaf',\n                            defaultValue: true\n                        }],\n\n                        root: {\n                            leaf: false\n                        },\n\n                        proxy: {\n                            type: 'jsonp',\n                            url: 'https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&amp;q=http://feeds.feedburner.com/SenchaBlog',\n                            reader: {\n                                type: 'json',\n                                rootProperty: 'responseData.feed.entries'\n                            }\n                        }\n                    },\n\n                    detailCard: {\n                        xtype: 'panel',\n                        scrollable: true,\n                        styleHtmlContent: true\n                    },\n\n                    listeners: {\n                        itemtap: function(nestedList, list, index, element, post) {\n                            this.getDetailCard().setHtml(post.get('content'));\n                        }\n                    }\n                },\n\n                // This is the contact page, which features a form and a button. The button submits the form.\n                {\n                    xtype: 'formpanel',\n                    title: 'Contact Us',\n                    iconCls: 'user',\n                    url: 'contact.php',\n                    layout: 'vbox',\n\n                    items: [\n                        {\n                            xtype: 'fieldset',\n                            title: 'Contact Us',\n                            instructions: 'Email address is optional',\n\n                            items: [\n                                {\n                                    xtype: 'textfield',\n                                    label: 'Name',\n                                    name: 'name'\n                                },\n                                {\n                                    xtype: 'emailfield',\n                                    label: 'Email',\n                                    name: 'email'\n                                },\n                                {\n                                    xtype: 'textareafield',\n                                    label: 'Message',\n                                    name: 'message',\n                                    height: 90\n                                }\n                            ]\n                        },\n                        {\n                            xtype: 'button',\n                            text: 'Send',\n                            ui: 'confirm',\n\n                            // The handler is called when the button is tapped\n                            handler: function() {\n\n                                // Look up the items stack and get a reference to the first form it finds\n                                var form = this.up('formpanel');\n\n                                // Send an AJAX request with form data to the URL for contact.php\n                                // Call the success callback if we get a non-error response from the server\n                                form.submit({\n                                    success: function() {\n                                        // Run the callback function when a user taps the OK button\n                                        <a href=\"#!/api/Ext.Msg-method-alert\" rel=\"Ext.Msg-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Thank You', 'Your message has been received', function() {\n                                            form.reset();\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    ]\n                }\n            ]\n        });\n    }\n});\n</code></pre>\n\n<h2 id='first_app-section-getting-started'>Getting Started</h2>\n\n<p>The first thing we do is set up our application, as outlined in the <a href=\"#!/guide/getting_started\">Getting Started Guide</a>. Since the app uses a <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">tab panel</a> that holds the four pages, we start with creating that UI. The entry point for Sencha Touch is the launch function of an <a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>. Consider this the <code>main</code> part of the application, and the place that contains the application logic.</p>\n\n<pre class='inline-example raw miniphone'><code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>({\n    name: 'Sencha',\n\n    launch: function() {\n        <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>(\"<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>\", {\n            fullscreen: true,\n            items: [\n                {\n                    title: 'Home',\n                    iconCls: 'home',\n                    html: 'Welcome'\n                }\n            ]\n        });\n    }\n});\n</code></pre>\n\n<p>If you run this code in the browser (by clicking the Preview button), a <a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">TabPanel</a> appears on top of the screen. Since the home page could be a bit more welcoming, add some content to it and reposition the tab bar at the bottom of the page. By default, the tab bar is positioned at the top of the page, but setting the <a href=\"#!/api/Ext.tab.Panel-cfg-tabBarPosition\" rel=\"Ext.tab.Panel-cfg-tabBarPosition\" class=\"docClass\">tabBarPosition</a> config moves it to the page bottom. Then we add HTML into the items array to create  content. Use items arrays to add child items into a container, as shown in the following code:</p>\n\n<pre class='inline-example raw portrait'><code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>({\n    name: 'Sencha',\n\n    launch: function() {\n        <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>(\"<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>\", {\n            fullscreen: true,\n            tabBarPosition: 'bottom',\n\n            items: [\n                {\n                    title: 'Home',\n                    iconCls: 'home',\n                    html: [\n                        '&lt;img src=\"http://staging.sencha.com/img/sencha.png\" /&gt;',\n                        '&lt;h1&gt;Welcome to Sencha Touch&lt;/h1&gt;',\n                        \"&lt;p&gt;You're creating the Getting Started app. This demonstrates how \",\n                        \"to use tabs, lists, and forms to create a simple app&lt;/p&gt;\",\n                        '&lt;h2&gt;Sencha Touch&lt;/h2&gt;'\n                    ].join(\"\")\n                }\n            ]\n        });\n    }\n});\n</code></pre>\n\n<p>You can click the Preview button next to the example to inspect the result: you should see some HTML content, but it will not look very good. We add a <a href=\"#!/api/Ext.Component-cfg-cls\" rel=\"Ext.Component-cfg-cls\" class=\"docClass\">cls</a> config to the panel, adding a CSS class that we can target to make things look better. The CSS we add is in the examples/getting_started/index.html file in the SDK download. Here is how the home page looks at this point:</p>\n\n<pre class='inline-example raw preview portrait'><code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>({\n    name: 'Sencha',\n\n    launch: function() {\n        <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>(\"<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>\", {\n            fullscreen: true,\n            tabBarPosition: 'bottom',\n\n            items: [\n                {\n                    title: 'Home',\n                    iconCls: 'home',\n                    cls: 'home',\n\n                    html: [\n                        '&lt;img src=\"http://staging.sencha.com/img/sencha.png\" /&gt;',\n                        '&lt;h1&gt;Welcome to Sencha Touch&lt;/h1&gt;',\n                        \"&lt;p&gt;You're creating the Getting Started app. This demonstrates how \",\n                        \"to use tabs, lists, and forms to create a simple app.&lt;/p&gt;\",\n                        '&lt;h2&gt;Sencha Touch&lt;/h2&gt;'\n                    ].join(\"\")\n                }\n            ]\n        });\n    }\n});\n</code></pre>\n\n<h2 id='first_app-section-adding-the-blogs-page'>Adding the Blogs Page</h2>\n\n<p>Now that we have a decent looking home page, we move to the next screen. To keep the code for each page easy to follow, we create one tab at a time and then combine them all together at the end.</p>\n\n<p>For now, we remove the first tab and replace it with a List. We use Google's <a href=\"https://developers.google.com/feed/v1/reference\">Feed API service</a> to fetch the feeds. Because there is more code involved, first we take a look at the result, then we explain how we accomplish it:</p>\n\n<pre class='inline-example raw portrait preview'><code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>({\n    name: 'Sencha',\n\n    launch: function() {\n        <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>(\"<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>\", {\n            fullscreen: true,\n            tabBarPosition: 'bottom',\n\n            items: [\n                {\n                    xtype: 'nestedlist',\n                    title: 'Blog',\n                    iconCls: 'star',\n                    displayField: 'title',\n\n                    store: {\n                        type: 'tree',\n\n                        fields: [\n                            'title', 'link', 'author', 'contentSnippet', 'content',\n                            {name: 'leaf', defaultValue: true}\n                        ],\n\n                        root: {\n                            leaf: false\n                        },\n\n                        proxy: {\n                            type: 'jsonp',\n                            url: 'https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&amp;q=http://feeds.feedburner.com/SenchaBlog',\n                            reader: {\n                                type: 'json',\n                                rootProperty: 'responseData.feed.entries'\n                            }\n                        }\n                    },\n\n                    detailCard: {\n                        xtype: 'panel',\n                        scrollable: true,\n                        styleHtmlContent: true\n                    },\n\n                    listeners: {\n                        itemtap: function(nestedList, list, index, element, post) {\n                            this.getDetailCard().setHtml(post.get('content'));\n                        }\n                    }\n                }\n            ]\n        });\n    }\n});\n</code></pre>\n\n<p>You can click the 'Code Editor' button above the example code to see the full code, but we will go over it piece by piece. At this point, instead of a panel, we use a <a href=\"#!/api/Ext.dataview.NestedList\" rel=\"Ext.dataview.NestedList\" class=\"docClass\">nestedlist</a>, and populate the list with the most recent blog posts fetched from sencha.com/blog. We use a Nested List component so that we can drill down in the blog entry by tapping the list.</p>\n\n<p>Let us break down the previous code, starting with the list itself:</p>\n\n<pre class='inline-example raw portrait'><code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>({\n    name: 'Sencha',\n\n    launch: function() {\n        <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>(\"<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>\", {\n            fullscreen: true,\n            tabBarPosition: 'bottom',\n\n            items: [\n                {\n                    xtype: 'nestedlist',\n                    title: 'Blog',\n                    iconCls: 'star',\n                    displayField: 'title',\n\n                    store: {\n                        type: 'tree',\n\n                        fields: [\n                            'title', 'link', 'author', 'contentSnippet', 'content',\n                            {name: 'leaf', defaultValue: true}\n                        ],\n\n                        root: {\n                            leaf: false\n                        },\n\n                        proxy: {\n                            type: 'jsonp',\n                            url: 'https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&amp;q=http://feeds.feedburner.com/SenchaBlog',\n                            reader: {\n                                type: 'json',\n                                rootProperty: 'responseData.feed.entries'\n                            }\n                        }\n                    }\n                }\n            ]\n        });\n    }\n});\n</code></pre>\n\n<p>In the previous code, we gave the Nested List a number of one-line configurations - title, iconCls, and displayField - and a more detailed one called <a href=\"#!/api/Ext.dataview.NestedList-cfg-store\" rel=\"Ext.dataview.NestedList-cfg-store\" class=\"docClass\">store</a>. The Store config tells the nested list how to fetch its data. Let's examine each Store configuration:</p>\n\n<ul>\n<li><em>type: tree</em> - Creates a <a href=\"#!/api/Ext.data.TreeStore\" rel=\"Ext.data.TreeStore\" class=\"docClass\">tree store</a>, which NestedList uses.</li>\n<li><em>fields</em> - Tells the Store what fields we expect in the blog data (title, content, author, and so on).</li>\n<li><em>proxy</em> - Tells the Store from where to fetch its data.</li>\n<li><em>root</em> - Tells the root node it is not a leaf. Since earlier in the code, we set the leaf defaultValue to true, we need to override that for the root.</li>\n</ul>\n\n\n<p>Of all the Store configurations, proxy is doing the most important work. We are telling the proxy to use Google's <a href=\"https://developers.google.com/feed/v1/reference\">Feed API service</a> to return our blog data in JSON-P format. This allows us to grab feed data from a blog and view it in our app (for example try swapping the Sencha blog URL for http://rss.slashdot.org/Slashdot/slashdot in the previous example to fetch Slashdot's feed).</p>\n\n<p>The last part of the proxy definition is a Reader. The reader is the entity that decodes the response from Google into useful data. When Google sends back the blog data, they nest it inside a JSON object that looks a bit like in the following example:</p>\n\n<pre><code>{\n    responseData: {\n        feed: {\n            entries: [\n                {author: 'Bob', title: 'Great Post', content: 'Really good content...'}\n            ]\n        }\n    }\n}\n</code></pre>\n\n<p>In this code, the important part is the entries array, so we set our Reader's <a href=\"#!/api/Ext.data.reader.Json-cfg-rootProperty\" rel=\"Ext.data.reader.Json-cfg-rootProperty\" class=\"docClass\">rootProperty</a> to 'responseData.feed.entries' and let the framework do the rest.</p>\n\n<h3 id='first_app-section-digging-in'>Digging In</h3>\n\n<p>Now that we have our nested list fetching and showing data, we need to allow users to tap an entry to read it. To add this functionality, we add two more configurations to our Nested List, as follows:</p>\n\n<pre><code>{\n    xtype: 'nestedlist',\n    //all other configurations as above\n\n    detailCard: {\n        xtype: 'panel',\n        scrollable: true,\n        styleHtmlContent: true\n    },\n\n    listeners: {\n        itemtap: function(nestedList, list, index, element, post) {\n            this.getDetailCard().setHtml(post.get('content'));\n        }\n    }\n}\n</code></pre>\n\n<p>In this code sample, we create a <a href=\"#!/api/Ext.dataview.NestedList-cfg-detailCard\" rel=\"Ext.dataview.NestedList-cfg-detailCard\" class=\"docClass\">detailCard</a>, which is a useful feature of Nested List that allows you to show a different view when a user taps on an item. We configured our detailCard to be a scrollable <a href=\"#!/api/Ext.Panel\" rel=\"Ext.Panel\" class=\"docClass\">Panel</a> that uses <a href=\"#!/api/Ext.Panel-cfg-styleHtmlContent\" rel=\"Ext.Panel-cfg-styleHtmlContent\" class=\"docClass\">styleHtmlContent</a> to make the text look good.</p>\n\n<p>The final step is adding an <a href=\"#!/api/Ext.dataview.NestedList-event-itemtap\" rel=\"Ext.dataview.NestedList-event-itemtap\" class=\"docClass\">itemtap</a> listener, which calls our function whenever an item is tapped on. The function sets the detailCard's HTML to the content of the post on which you tapped. The framework animates the detail card into view to make the post appear. This was the only line of code we had to write to make the blog reader work.</p>\n\n<h2 id='first_app-section-creating-a-contact-form'>Creating a Contact Form</h2>\n\n<p>The final thing we do for our app is create a contact form. We take the user's name, email address, and a message, and use a <a href=\"#!/api/Ext.form.FieldSet\" rel=\"Ext.form.FieldSet\" class=\"docClass\">FieldSet</a> to make it look good. The code for this functionality is as follows:</p>\n\n<pre class='inline-example raw portrait'><code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>({\n    name: 'Sencha',\n\n    launch: function() {\n        <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>(\"<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>\", {\n            fullscreen: true,\n            tabBarPosition: 'bottom',\n\n            items: [\n                {\n                    title: 'Contact',\n                    iconCls: 'user',\n                    xtype: 'formpanel',\n                    url: 'contact.php',\n                    layout: 'vbox',\n\n                    items: [\n                        {\n                            xtype: 'fieldset',\n                            title: 'Contact Us',\n                            instructions: '(email address is optional)',\n                            items: [\n                                {\n                                    xtype: 'textfield',\n                                    label: 'Name'\n                                },\n                                {\n                                    xtype: 'emailfield',\n                                    label: 'Email'\n                                },\n                                {\n                                    xtype: 'textareafield',\n                                    label: 'Message'\n                                }\n                            ]\n                        },\n                        {\n                            xtype: 'button',\n                            text: 'Send',\n                            ui: 'confirm',\n                            handler: function() {\n                                this.up('formpanel').submit();\n                            }\n                        }\n                    ]\n                }\n            ]\n        });\n    }\n});\n</code></pre>\n\n<p>This time we create a <a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">form</a> that contains a <a href=\"#!/api/Ext.form.FieldSet\" rel=\"Ext.form.FieldSet\" class=\"docClass\">fieldset</a>. The fieldset contains three fields - one for a name, one for email address, and one for a message. We use a <a href=\"#!/api/Ext.layout.VBox\" rel=\"Ext.layout.VBox\" class=\"docClass\">VBox layout</a> to arrange the items vertically on the page, one above the other.</p>\n\n<p>At the bottom of the panel we added a <a href=\"#!/api/Ext.Button\" rel=\"Ext.Button\" class=\"docClass\">Button</a> with a tap <a href=\"#!/api/Ext.Button-cfg-handler\" rel=\"Ext.Button-cfg-handler\" class=\"docClass\">handler</a>. The handler uses the <a href=\"#!/api/Ext.Container-method-up\" rel=\"Ext.Container-method-up\" class=\"docClass\">up</a> method, which returns the form panel containing the button. We then call <a href=\"#!/api/Ext.form.Panel-method-submit\" rel=\"Ext.form.Panel-method-submit\" class=\"docClass\">submit</a> to submit the form, which sends it to the specified URL ('contact.php').</p>\n\n<h2 id='first_app-section-putting-it-all-together'>Putting It All Together</h2>\n\n<p>After creating each view individually, let's bring them all together into a complete app:</p>\n\n<pre class='inline-example raw preview portrait'><code>// We've added a third and final item to our tab panel - scroll down to see it\n<a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>({\n    name: 'Sencha',\n\n    launch: function() {\n        <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>(\"<a href=\"#!/api/Ext.tab.Panel\" rel=\"Ext.tab.Panel\" class=\"docClass\">Ext.tab.Panel</a>\", {\n            fullscreen: true,\n            tabBarPosition: 'bottom',\n\n            items: [\n                {\n                    title: 'Home',\n                    iconCls: 'home',\n                    cls: 'home',\n                    html: [\n                        '&lt;img width=\"65%\" src=\"http://staging.sencha.com/img/sencha.png\" /&gt;',\n                        '&lt;h1&gt;Welcome to Sencha Touch&lt;/h1&gt;',\n                        \"&lt;p&gt;We're creating the Getting Started app, which demonstrates how \",\n                        \"to use tabs, lists, and forms to create a simple app.&lt;/p&gt;\",\n                        '&lt;h2&gt;Sencha Touch&lt;/h2&gt;'\n                    ].join(\"\")\n                },\n                {\n                    xtype: 'nestedlist',\n                    title: 'Blog',\n                    iconCls: 'star',\n                    displayField: 'title',\n\n                    store: {\n                        type: 'tree',\n\n                        fields: [\n                            'title', 'link', 'author', 'contentSnippet', 'content',\n                            {name: 'leaf', defaultValue: true}\n                        ],\n\n                        root: {\n                            leaf: false\n                        },\n\n                        proxy: {\n                            type: 'jsonp',\n                            url: 'https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&amp;q=http://feeds.feedburner.com/SenchaBlog',\n                            reader: {\n                                type: 'json',\n                                rootProperty: 'responseData.feed.entries'\n                            }\n                        }\n                    },\n\n                    detailCard: {\n                        xtype: 'panel',\n                        scrollable: true,\n                        styleHtmlContent: true\n                    },\n\n                    listeners: {\n                        itemtap: function(nestedList, list, index, element, post) {\n                            this.getDetailCard().setHtml(post.get('content'));\n                        }\n                    }\n                },\n                // this is the new item\n                {\n                    title: 'Contact',\n                    iconCls: 'user',\n                    xtype: 'formpanel',\n                    url: 'contact.php',\n                    layout: 'vbox',\n\n                    items: [\n                        {\n                            xtype: 'fieldset',\n                            title: 'Contact Us',\n                            instructions: '(email address is optional)',\n                            items: [\n                                {\n                                    xtype: 'textfield',\n                                    label: 'Name'\n                                },\n                                {\n                                    xtype: 'emailfield',\n                                    label: 'Email'\n                                },\n                                {\n                                    xtype: 'textareafield',\n                                    label: 'Message'\n                                }\n                            ]\n                        },\n                        {\n                            xtype: 'button',\n                            text: 'Send',\n                            ui: 'confirm',\n                            handler: function() {\n                                this.up('formpanel').submit();\n                            }\n                        }\n                    ]\n                }\n            ]\n        });\n    }\n});\n</code></pre>\n\n<p>You can find the full source code of the Getting Started app in the examples/getting_started folder of the Sencha Touch SDK.</p>\n","title":"Building your First App"});