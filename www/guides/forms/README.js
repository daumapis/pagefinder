Ext.data.JsonP.forms({"guide":"<h1 id='forms-section-using-forms-in-sencha-touch'>Using Forms in Sencha Touch</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/forms-section-creating-a-form'>Creating a Form</a></li>\n<li><a href='#!/guide/forms-section-loading-data'>Loading Data</a></li>\n<li><a href='#!/guide/forms-section-retrieving-form-data'>Retrieving Form Data</a></li>\n<li><a href='#!/guide/forms-section-submitting-forms'>Submitting Forms</a></li>\n</ol>\n</div>\n\n<p>Most apps that require user input make use of forms. In Sencha Touch forms are a wrapper around normal HTML5 forms, with additional options for validating and submitting data, and provide an easy way to lay out fields in an appealing visual style.</p>\n\n<pre class='inline-example preview'><code>var formPanel = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    fullscreen: true,\n\n    items: [{\n        xtype: 'fieldset',\n        items: [\n            {\n                xtype: 'textfield',\n                name : 'name',\n                label: 'Name'\n            },\n            {\n                xtype: 'emailfield',\n                name : 'email',\n                label: 'Email'\n            },\n            {\n                xtype: 'passwordfield',\n                name : 'password',\n                label: 'Password'\n            }\n        ]\n    }]\n});\n\nformPanel.add({\n    xtype: 'toolbar',\n    docked: 'bottom',\n    layout: { pack: 'center' },\n    items: [\n        {\n            xtype: 'button',\n            text: 'Set Data',\n            handler: function() {\n                formPanel.setValues({\n                    name: 'Ed',\n                    email: 'ed@sencha.com',\n                    password: 'secret'\n                });\n            }\n        },\n        {\n            xtype: 'button',\n            text: 'Get Data',\n            handler: function() {\n                <a href=\"#!/api/Ext.Msg-method-alert\" rel=\"Ext.Msg-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Form Values', JSON.stringify(formPanel.getValues(), null, 2));\n            }\n        },\n        {\n            xtype: 'button',\n            text: 'Clear Data',\n            handler: function() {\n                formPanel.reset();\n            }\n        }\n    ]\n});\n</code></pre>\n\n<h2 id='forms-section-creating-a-form'>Creating a Form</h2>\n\n<p>The Form panel presents a set of form fields and provides convenient ways to load and save data. Usually a form panel contains the set of fields that you want to display, ordered inside the items configuration, as shown in the following example:</p>\n\n<pre class='inline-example preview'><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    fullscreen: true,\n\n    items: [\n        {\n            xtype: 'textfield',\n            name : 'name',\n            label: 'Name'\n        },\n        {\n            xtype: 'emailfield',\n            name : 'email',\n            label: 'Email'\n        },\n        {\n            xtype: 'passwordfield',\n            name : 'password',\n            label: 'Password'\n        }\n    ]\n});\n</code></pre>\n\n<p>In this example we created a simple form panel which could be used as a registration form to sign up to a service. We added a plain <a href=\"#!/api/Ext.field.Text\" rel=\"Ext.field.Text\" class=\"docClass\">text field</a> for the user's Name, an <a href=\"#!/api/Ext.field.Email\" rel=\"Ext.field.Email\" class=\"docClass\">email field</a> and finally a <a href=\"#!/api/Ext.field.Password\" rel=\"Ext.field.Password\" class=\"docClass\">password field</a>. In each case we provided a <a href=\"#!/api/Ext.field.Field-cfg-name\" rel=\"Ext.field.Field-cfg-name\" class=\"docClass\">name</a> config on the field for identifying it when we load and save data on the form.</p>\n\n<h2 id='forms-section-loading-data'>Loading Data</h2>\n\n<p>Using the form we created above, we can load data into it in a different ways, the easiest way being the <a href=\"#!/api/Ext.form.Panel-method-setValues\" rel=\"Ext.form.Panel-method-setValues\" class=\"docClass\">setValues</a> method:</p>\n\n<pre><code>form.setValues({\n    name: 'Ed',\n    email: 'ed@sencha.com',\n    password: 'secret'\n});\n</code></pre>\n\n<p>You can also load <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> instances into a form - for example assuming that you have a User model and want to load a particular instance into the form:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('MyApp.model.User', {\n    extend: '<a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Ext.data.Model</a>',\n    config: {\n        fields: ['name', 'email', 'password']\n    }\n});\n\nvar ed = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('MyApp.model.User', {\n    name: 'Ed',\n    email: 'ed@sencha.com',\n    password: 'secret'\n});\n\nform.setRecord(ed);\n</code></pre>\n\n<h2 id='forms-section-retrieving-form-data'>Retrieving Form Data</h2>\n\n<p>Retrieving data from the form panel is usually done using the <a href=\"#!/api/Ext.form.Panel-method-getValues\" rel=\"Ext.form.Panel-method-getValues\" class=\"docClass\">getValues</a> method:</p>\n\n<pre><code>var values = form.getValues();\n\n// values now looks like this:\n{\n    name: 'Ed',\n    email: 'ed@sencha.com',\n    password: 'secret'\n}\n</code></pre>\n\n<p>It is also possible to listen to change events on individual fields in order to get more timely notification of changes that the user is making. In the following example we expand on the previous code containing the User model, and update the model as soon as any of the fields change:</p>\n\n<pre><code>var form = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.form.Panel\" rel=\"Ext.form.Panel\" class=\"docClass\">Ext.form.Panel</a>', {\n    listeners: {\n        '&gt; field': {\n            change: function(field, newValue, oldValue) {\n                ed.set(field.getName(), newValue);\n            }\n        }\n    },\n    items: [\n        // as before\n    ]\n});\n</code></pre>\n\n<p>This example used a new capability of Sencha Touch, which enables you to specify listeners on child components of any container. In this case, we attached a listener to the <a href=\"#!/api/Ext.field.Text-event-change\" rel=\"Ext.field.Text-event-change\" class=\"docClass\">change</a> event of each form field that is a direct child of the form panel. The listener gets the name of the field that fired the change event, and updates the <a href=\"#!/api/Ext.data.Model\" rel=\"Ext.data.Model\" class=\"docClass\">Model</a> instance with the new value. For example, changing the email field in the form will update the Model's email field.</p>\n\n<h2 id='forms-section-submitting-forms'>Submitting Forms</h2>\n\n<p>Sencha Touch provides a number of ways to submit form data. In the previous example we have a Model instance that we have updated, which enables us to use the Model's <a href=\"#!/api/Ext.data.Model-method-save\" rel=\"Ext.data.Model-method-save\" class=\"docClass\">save</a> method to persist the changes to our server, without using a traditional form submission. Alternatively, we can send a normal browser form submit using the <a href=\"#!/api/Ext.form.Panel-method-submit\" rel=\"Ext.form.Panel-method-submit\" class=\"docClass\">submit</a> method:</p>\n\n<pre><code>form.submit({\n    url: 'url/to/submit/to',\n    method: 'POST',\n    success: function() {\n        alert('form submitted successfully!');\n    }\n});\n</code></pre>\n\n<p>In this case we provided the url to submit the form to inside the submit function call - alternatively you can set the <a href=\"#!/api/Ext.form.Panel-cfg-url\" rel=\"Ext.form.Panel-cfg-url\" class=\"docClass\">url</a> configuration when you create the form. You can specify other parameters (see <a href=\"#!/api/Ext.form.Panel-method-submit\" rel=\"Ext.form.Panel-method-submit\" class=\"docClass\">submit</a> for a full list), including callback functions for success and failure, which are called depending on whether the form submission was successful or not. These functions are usually used to take some action in your app after the data has been saved to the server.</p>\n","title":"Using Forms"});