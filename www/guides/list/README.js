Ext.data.JsonP.list({"guide":"<h1 id='list-section-using-lists-in-sencha-touch'>Using Lists in Sencha Touch</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/list-section-guide'>Guide</a></li>\n<li><a href='#!/guide/list-section-creating-a-simple-list'>Creating a Simple List</a></li>\n</ol>\n</div>\n\n<p>Sencha Touch provides a List component for presenting an\nindex-style list of items. In this tutorial, we walk you through setting\nup a basic list, and show how to add an index bar and group items together\nunder a marker. We also show you how to create a detail panel to reveal\ninformation about each list item.</p>\n\n<p>This tutorial features the new NavigationView and MVC Support built into Sencha Touch.</p>\n\n<p>You can view the source code on GitHub: <a href=\"http://github.com/senchalearn/Presidents\">http://github.com/senchalearn/Presidents</a></p>\n\n<h2 id='list-section-guide'>Guide</h2>\n\n<p>List is a component that renders a <a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a> as a list of items\non the page. List is a subclass of <a href=\"#!/api/Ext.dataview.DataView\" rel=\"Ext.dataview.DataView\" class=\"docClass\">DataView</a>, which\nprovides most of its capabilities (see <a href=\"#/guide/dataview\">DataView guide</a>).\nHowever, a List adds the following capabilities of its own:</p>\n\n<ul>\n<li>Grouping of items, optional index bar, pinned headers</li>\n<li>Optional disclosure icons on each item</li>\n<li>Optional icons and labels for each item</li>\n</ul>\n\n\n<h2 id='list-section-creating-a-simple-list'>Creating a Simple List</h2>\n\n<p>You can render a List with static items as follows:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.dataview.List\" rel=\"Ext.dataview.List\" class=\"docClass\">Ext.List</a>', {\n    store: {\n        fields: ['name'],\n        data: [\n            {name: 'Cowper'},\n            {name: 'Everett'},\n            {name: 'University'},\n            {name: 'Forest'}\n        ]\n    },\n\n    itemTpl: '{name}'\n});\n</code></pre>\n\n<p>This code sample renders one <a href=\"#!/api/Ext.dataview.component.DataItem\" rel=\"Ext.dataview.component.DataItem\" class=\"docClass\">DataItem</a> for each item in the\n<a href=\"#!/api/Ext.data.Store\" rel=\"Ext.data.Store\" class=\"docClass\">Store</a>. You can also attach listeners to events on the List, as illustrated\nby the following code:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.dataview.List\" rel=\"Ext.dataview.List\" class=\"docClass\">Ext.List</a>', {\n    listeners: {\n        select: function(view, record) {\n            <a href=\"#!/api/Ext.Msg-method-alert\" rel=\"Ext.Msg-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Selected!', 'You selected ' + record.get('name'));\n        }\n    }\n\n    // store and itemConfig as before\n});\n</code></pre>\n\n<h3 id='list-section-preview'>Preview</h3>\n\n<pre class='inline-example preview'><code><a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.dataview.List\" rel=\"Ext.dataview.List\" class=\"docClass\">Ext.List</a>', {\n    fullscreen: true,\n\n    store: {\n        fields: ['name'],\n        data: [\n            {name: 'Cowper'},\n            {name: 'Everett'},\n            {name: 'University'},\n            {name: 'Forest'}\n        ]\n    },\n\n    itemTpl: '{name}',\n\n    listeners: {\n        select: function(view, record) {\n            <a href=\"#!/api/Ext.Msg-method-alert\" rel=\"Ext.Msg-method-alert\" class=\"docClass\">Ext.Msg.alert</a>('Selected!', 'You selected ' + record.get('name'));\n        }\n    }\n});\n</code></pre>\n","title":"Using List"});