Ext.data.JsonP.theming({"guide":"<h1 id='theming-section-theming-sencha-touch'>Theming Sencha Touch</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/theming-section-platforms'>Platforms</a></li>\n<li><a href='#!/guide/theming-section-themes'>Themes</a></li>\n<li><a href='#!/guide/theming-section-platformconfig'>platformConfig</a></li>\n<li><a href='#!/guide/theming-section-base-theme'>Base Theme</a></li>\n<li><a href='#!/guide/theming-section-upgrading-themes-from-sencha-touch-2-1-to-2-2'>Upgrading Themes From Sencha Touch 2.1 to 2.2</a></li>\n<li><a href='#!/guide/theming-section-list-component'>List Component</a></li>\n<li><a href='#!/guide/theming-section-using-an-existing-theme'>Using an Existing Theme</a></li>\n<li><a href='#!/guide/theming-section-extending-an-existing-theme'>Extending an Existing Theme</a></li>\n<li><a href='#!/guide/theming-section-creating-a-new-theme'>Creating a New Theme</a></li>\n<li><a href='#!/guide/theming-section-icon-fonts'>Icon Fonts</a></li>\n</ol>\n</div>\n\n<p>Sencha Touch theming works the same as in ExtJS. For more information, see\nthe <a href=\"http://docs.sencha.com/ext-js/#!/guide/theming\">ExtJS Theming Guide</a>.</p>\n\n<p>Touch 2.2 introduced these new features and changes:</p>\n\n<ul>\n<li><a href=\"#!/guide/theming-section-Platforms\">Platforms</a></li>\n<li><a href=\"#!/guide/theming-section-Themes\">Themes</a></li>\n<li><a href=\"#!/guide/theming-section-PlatformConfig\">platformConfig</a></li>\n<li><a href=\"#!/guide/theming-section-BaseTheme\">Base Theme</a></li>\n<li><a href=\"#!/guide/theming-section-ListComponent\">List Component</a></li>\n<li><a href=\"#!/guide/theming-section-IconFonts\">Icon Fonts</a></li>\n</ul>\n\n\n<p><a name=\"theming-section-Platforms\"></a></p>\n\n<h2 id='theming-section-platforms'>Platforms</h2>\n\n<p>Sencha Touch 2.2 introduces the capability of defining platforms, which gives you the ability to load\nspecific resources in your application based on the platform on which your app runs.</p>\n\n<p>In the following example from an application's <code>app.json</code> file, the application loads the\n<code>sencha-touch.css</code> file when the app runs on Chrome, Safari, iOS, Android, or Firefox:</p>\n\n<pre><code>\"css\": [\n    {\n        \"path\": \"resources/css/sencha-touch.css\",\n        \"platform\": [\"chrome\", \"safari\", \"ios\", \"android\", \"firefox\"]\n    }\n]\n</code></pre>\n\n<p>You can specify multiple platforms and use it to load JS resources. In this example, the <code>vendorfiles.js</code>\nresource loads when the platform is Chrome, Safari, or iOS:</p>\n\n<pre><code>\"js\": [\n    {\n        \"path\": \"vendorfiles.js\",\n        \"platform\": [\"chrome\", \"safari\", \"ios\"]\n    }\n]\n</code></pre>\n\n<p>Each loads only if the platform of the device running the app matches a platform you specify\nfor the resource.</p>\n\n<p>You can test this functionality by using the <code>platform</code> parameter in a URL:</p>\n\n<pre><code>http://localhost/sdk/touch/examples/kitchensink/index.html?platform=ie10\n</code></pre>\n\n<p>You can also detect which platform the device is running on from within your application by using\n<code>platformConfig</code>.</p>\n\n<p>The list of available platforms are:</p>\n\n<ul>\n<li>android</li>\n<li>blackberry</li>\n<li>chrome</li>\n<li>desktop</li>\n<li>firefox</li>\n<li>ie10</li>\n<li>ios</li>\n<li>phone</li>\n<li>safari</li>\n<li>tablet</li>\n</ul>\n\n\n<p><a name=\"theming-section-Themes\"></a></p>\n\n<h2 id='theming-section-themes'>Themes</h2>\n\n<p>Themes are a set of CSS styles you can set\nto change an application's appearance for a device or platform. You can reference the styles\nas resources in your <code>app.json</code> file for your application.</p>\n\n<p>Sencha Touch provides a base theme that you can\ncustomize, a Sencha Touch theme, an IE10 theme for Windows Phone and Surface, and a BlackBerry 10 theme.\nTo code a theme, use Compass and Sass, which are provided when you install\n<a href=\"http://www.sencha.com/products/sencha-cmd/download\">Sencha Cmd</a>.</p>\n\n<p>In this example, the <code>Apple</code> theme loads only when the platform is iOS. When the iOS platform loads,\nyour app knows that the current theme is <code>Apple</code>:</p>\n\n<pre><code>\"css\": [\n    {\n        \"path\": \"resources/css/sencha-touch.css\",\n        \"platform\": [\"ios\"],\n        \"Theme\": \"Apple\"\n    }\n]\n</code></pre>\n\n<p>Within your application, you can access a theme name by using <code>Ext.theme.name</code>.</p>\n\n<p>If you do not define a theme, the theme name is <code>Default</code>.</p>\n\n<p>You can test themes by using the <code>theme</code> parameter in the URL when running your app:</p>\n\n<pre><code>http://localhost/sdk/touch/examples/kitchensink/index.html?theme=Apple\n</code></pre>\n\n<p><strong>Important</strong>  The framework uses the <code>Windows</code> and <code>Blackberry</code> themes to change the functionality\nof the framework <strong>if</strong> that theme is in use. If you want to replicate that functionality, and\nyou intend to use either the <code>Windows</code> or <code>Blackberry</code> themes, you should also use those names.</p>\n\n<p><a name=\"theming-section-PlatformConfig\"></a></p>\n\n<h2 id='theming-section-platformconfig'>platformConfig</h2>\n\n<p>The <code>platformConfig</code> feature lets you define config values\nbased on the current platform, or theme, on which your application is running.</p>\n\n<p>This example defines a new class <code>Example.view.Login</code> that uses a simple login form.\nThe value for the FieldSet title is specfied as <code>Login</code>, however by using <code>platformConfig</code>,\nyou can set the value of the title based on the platform - in this case, <code>ie10</code>.</p>\n\n<pre><code>    <a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Example.view.Login', {\n            extend: 'Ext.panel.FieldSet',\n\n            config: {\n                    title: 'Login'\n            },\n\n            platformConfig: [{\n                    platform: 'ie10',\n                    title: 'Microsoft Login'\n            }]\n    });\n</code></pre>\n\n<p>A more complex example could display your view differently or change the items in your view\nbased on the platform you are running.</p>\n\n<p>The config system in Sencha Touch is incredibly powerful. It allows you to develop applications\nwith lots of functionality, very quickly. For more information about the config system,\nread the <a href=\"http://docs.sencha.com/touch/#!/guide/class_system\">Class System</a> guide.</p>\n\n<p><a name=\"theming-section-BaseTheme\"></a></p>\n\n<h2 id='theming-section-base-theme'>Base Theme</h2>\n\n<p>The base theme is the required styling to lay out\ncomponents of Sencha Touch. There are no colors or custom styling like gradients and margins\nand padding. It is simply the starting point of actual themes.</p>\n\n<p>In previous Touch versions, if you wanted to create highly customized themes, you had to override a\nlot of the styling of the Default theme by using lots of hacks like <code>!important</code>.</p>\n\n<p>Developing themes for Sencha Touch was made simple with the use of Sass, Compass and their features.\nThis lets you dynamically change colors and measurements using variables, and create new UIs by using mixins.\nThis rapidly speeds up development of custom themes based on the default Sencha Touch theme.</p>\n\n<p>Advantages of the new base theme:</p>\n\n<ul>\n<li>No layouts for Sencha Touch components. These are already handled for you in the base.\nAll you have to do is style a component for how you want it.</li>\n<li>No overriding default styles, because there are none. The base theme only\nlays out components, which means it is actually usable. You need to build on the base theme to style it,\nbut there is no longer any need to use hacks to remove the existing styling.\nWhich in turn, reduces the file style of your CSS because you no longer have all that default styling.</li>\n<li>Faster CSS compiles. Along with reduced size, themes provide faster compile times.\nSencha Touch uses Compass to compile\nstylesheets from Sass to CSS. In older Sencha Touch versions, Compass could take multiple seconds\nto compile because it had to compile the default theme along with all your custom styling.\nNow that the base is separate, you only have to compile your custom styling - which means\ncompiling themes has dropped to fractions of seconds. This makes writing stylesheets much quicker.</li>\n</ul>\n\n\n<p><p class='screenshot'><img src='guides/theming/base-theme.png' alt=''><span></span></p></p>\n\n<h2 id='theming-section-upgrading-themes-from-sencha-touch-2-1-to-2-2'>Upgrading Themes From Sencha Touch 2.1 to 2.2</h2>\n\n<p>There are a lot of changes from Sencha Touch 2.1 to 2.2, but the upgrade path is rather simple.</p>\n\n<p>The most important change to be aware of is the move away from using mixins for each component.\nWe found that using mixins for each component was quite slow when compiling your Sass,\nso we decided to simply move to using <code>@import</code> to just include each component.</p>\n\n<p>In Touch 2.1, your stylesheet looked like this:</p>\n\n<pre><code>@import 'sencha-touch/default/all';\n\n@include sencha-panel;\n@include sencha-buttons;\n// and other componentsâ€¦\n</code></pre>\n\n<p>In Touch 2.2, it looks like this:</p>\n\n<pre><code>@import 'sencha-touch/default';\n\n@import 'sencha-touch/default/Panel';\n@import 'sencha-touch/default/Button';\n// and other components\n</code></pre>\n\n<p>Instead of using <code>@include</code> to include a component mixin, use <code>@import</code> to import the component.</p>\n\n<p>To include all default components in Sencha Touch 2.2, use:</p>\n\n<pre><code>@import 'sencha-touch/default';\n@import 'sencha-touch/default/all';\n</code></pre>\n\n<p>The same goes for when you are using other themes.</p>\n\n<p>Windows:</p>\n\n<pre><code>@import 'sencha-touch/windows';\n@import 'sencha-touch/windows/all';\n</code></pre>\n\n<p>BlackBerry:</p>\n\n<pre><code>@import 'sencha-touch/bb10';\n@import 'sencha-touch/bb10/all';\n</code></pre>\n\n<p>To include only the base theme:</p>\n\n<pre><code>@import 'sencha-touch/base';\n@import 'sencha-touch/base/all';\n</code></pre>\n\n<p>The base theme does not have styling like the Default, Windows, and BlackBerry themes.</p>\n\n<p><a name=\"theming-section-ListComponent\"></a></p>\n\n<h2 id='theming-section-list-component'>List Component</h2>\n\n<p>The List component has been optimized to ensure performance is best in every scenario.\nLists now have these modes:</p>\n\n<ul>\n<li>Normal items</li>\n<li>Infinite</li>\n<li>Simple items</li>\n<li>Items with different heights</li>\n</ul>\n\n\n<p>Unfortunately this means that the DOM structure of list items can change depending on the mode the list is running.\nTherefore if you have custom styling on lists or list items, change the selectors to match the new selectors used in 2.2.</p>\n\n<h2 id='theming-section-using-an-existing-theme'>Using an Existing Theme</h2>\n\n<p>Using one of the default themes in your Sencha Touch 2.2 application is simple.\nJust include the appropriate theme stylesheet into your <code>app.json</code> file:</p>\n\n<pre><code>\"css\": [\n    {\n        \"path\": \"resources/css/wp.css\",\n        \"update\": \"delta\"\n    }\n]\n</code></pre>\n\n<p>This example includes only the Windows theme in the wp.css file. Ensure that the path points\nto the correct stylesheet within the SDK folder.</p>\n\n<p>If you want to load different themes depending on the platform, include them in your <code>app.json</code> file:</p>\n\n<pre><code>\"css\": [\n    {\n        \"path\": \"resources/css/sencha-touch.css\",\n        \"platform\": [\"chrome\", \"safari\", \"ios\", \"android\", \"firefox\"],\n        \"theme\": \"Default\",\n        \"update\": \"delta\"\n    },\n    {\n        \"path\": \"resources/css/wp.css\",\n        \"platform\": [\"ie10\"],\n        \"theme\": \"Windows\",\n        \"update\": \"delta\"\n    },\n    {\n        \"path\": \"resources/css/bb10.css\",\n        \"platform\": [\"blackberry\"],\n        \"theme\": \"Blackberry\",\n        \"update\": \"delta\"\n    }\n]\n</code></pre>\n\n<p>In this example, the Windows theme loads on the \"ie10\" platform and the BlackBerry theme loads on \"blackberry\".\nAll other devices uses the Default Sencha Touch theme.</p>\n\n<h2 id='theming-section-extending-an-existing-theme'>Extending an Existing Theme</h2>\n\n<p>Extending one of the default themes in Sencha Touch 2.2 is also simple.</p>\n\n<p>To extend a custom theme:</p>\n\n<ol>\n<li>Open your <code>resources/sass/app.scss</code> stylesheet which is automatically generated when creating an\napplication using <a href=\"http://www.sencha.com/products/sencha-cmd/download\">Sencha Cmd</a>.</li>\n<li><p>Include the Sencha Touch theme you want. This example uses the default theme:</p>\n\n<pre><code> @import 'sencha-touch/default';\n @import 'sencha-touch/default/all';\n</code></pre>\n\n<p> Or the Windows theme:</p>\n\n<pre><code> @import 'sencha-touch/windows';\n @import 'sencha-touch/windows/all';\n</code></pre></li>\n<li><p>Add your custom Sass styles.</p></li>\n<li><p>Compile and launch your application:</p>\n\n<pre><code> compass compile resources/sass\n</code></pre></li>\n</ol>\n\n\n<h2 id='theming-section-creating-a-new-theme'>Creating a New Theme</h2>\n\n<p>Creating a new theme is very similiar to extending a default theme,\nexcept that you only want to include the base theme.</p>\n\n<p>To create a theme:</p>\n\n<ol>\n<li>Open your <code>resources/sass/app.scss</code> stylesheet which is automatically generated when\ncreating an application using <a href=\"http://www.sencha.com/products/sencha-cmd/download\">Sencha Cmd</a>.</li>\n<li><p>Include the Sencha Touch base theme:</p>\n\n<pre><code> @import 'sencha-touch/base';\n @import 'sencha-touch/base/all';\n</code></pre></li>\n</ol>\n\n\n<p>Now you can write the custom Sass required to theme your app.</p>\n\n<h3 id='theming-section-custom-theme-tips'>Custom Theme Tips</h3>\n\n<ul>\n<li><p>Sencha Touch components always have a baseCls that matches the name of the component. Some example of this are:</p>\n\n<ul>\n<li><code><a href=\"#!/api/Ext.dataview.List\" rel=\"Ext.dataview.List\" class=\"docClass\">Ext.List</a></code> -> <code>.x-list</code></li>\n<li><code><a href=\"#!/api/Ext.field.Text\" rel=\"Ext.field.Text\" class=\"docClass\">Ext.field.Text</a></code> -> <code>.x-field-text</code></li>\n<li><code>Ext.field.Numer</code> -> <code>.x-field-number</code></li>\n<li><code>Ext.panel.Form</code> -> <code>.x-form-panel</code></li>\n</ul>\n</li>\n<li><p>If you are not familiar with the DOM structure of Sencha Touch applications,\nuse the Web Inspector of your browser to inspect the DOM to determine what elements you need to style.</p></li>\n<li><p>You can also use the Web Inspector to detect what the base theme uses as selectors:</p></li>\n<li><p>Navigate to a list example with just the base theme</p></li>\n<li><p>Select a list item and open it in the Web Inspector</p>\n\n<p> <p class='screenshot'><img src='guides/theming/list-select-1.png' alt=''><span></span></p></p></li>\n<li><p>Navigate the DOM until you see the selected class 'x-item-selected' (it may even be the select DOM element)</p>\n\n<p> <p class='screenshot'><img src='guides/theming/list-select-2.png' alt=''><span></span></p></p></li>\n<li><p>Use the styles panel to see and copy the selector used in the base theme.</p>\n\n<p> <p class='screenshot'><img src='guides/theming/list-select-3.png' alt=''><span></span></p></p></li>\n<li><p>Paste the selector into your <code>app.scss</code> file and style as needed:</p>\n\n<p> .x-list .x-list-item.x-item-selected .x-dock-horizontal,\n .x-list .x-list-item.x-item-selected.x-list-item-tpl {</p>\n\n<pre><code> color: red;\n</code></pre>\n\n<p> }</p></li>\n</ul>\n\n\n<p><a name=\"theming-section-IconFonts\"></a></p>\n\n<h2 id='theming-section-icon-fonts'>Icon Fonts</h2>\n\n<p>New in Touch 2.2, icons are now handled as fonts, which enables very fast scaling\nwithout the need to redraw the picture. Icons appear on buttons and tabs.</p>\n\n<p>Previously, scaling icons required more overhead for an application\nto draw a picture for an icon and then redraw, rescale, and change it as\nthe app appeared on different browsers and devices.</p>\n\n<p>To convert your existing icons to fonts, you can use Pictos Server, Pictonic,\nicomoon.io, or http://fontstruct.com/ â€” some of these are free or available with trial subscriptions.</p>\n\n<h3 id='theming-section-using-the-pictos-font'>Using the Pictos Font</h3>\n\n<p>The Pictos font provides a large collection of free icons. You can find a full list of characters\navailable for the Pictos font at <a href=\"http://www.pictos.cc\">http://www.pictos.cc</a>.\nSencha Touch provides free access to the <a href=\"http://pictos.cc/font/\">Pictos Font Pack</a>.</p>\n\n<p>When you build your application using Sencha Cmd, the font libraries are copied to your application file.</p>\n\n<p>Just like Sencha Touch 1 and 2, Sencha Touch 2.2 maps icon names to actual\nicons so you can use them within your application:</p>\n\n<pre><code>{\n    xtype: 'button',\n    iconCls: 'home',\n    title: 'Home'\n}\n</code></pre>\n\n<p>For a full list of <code>iconCls</code> functions that are available, refer to the <code><a href=\"#!/api/Ext.Button\" rel=\"Ext.Button\" class=\"docClass\">Ext.Button</a></code> class documentation.</p>\n\n<p>Alternatively, you can use the Compass icon mixin to map a specific character of the\nicon font to an iconCls which you can use in your app:</p>\n\n<pre>@include icon('home', 'H');\n</pre>\n\n\n<h3 id='theming-section-using-other-icon-fonts'>Using Other Icon Fonts</h3>\n\n<p>The Pictos font is not the only font you can use in your application.\nIf you know of another font or you have custom converted your icons to fonts,\nit is very easy to use that font with the icon mixin.</p>\n\n<p>Just like with the Pictos font, you need to specify the iconCls and character\nto be used for the icon. Additionally, you need to specify the name of the icon font,\nwhich needs to match the font family of the icon font you have, plus you need to\nmake sure the font has been included in your CSS using the icon-font mixin.</p>\n\n<p>This example specifies the Home icon in the custom MyFont:</p>\n\n<pre>@include icon('home', 'H', 'MyFont');\n</pre>\n\n\n<p>The following example shows how to include the Pictos font using the icon-font mixin:</p>\n\n<pre>@include icon-font('Pictos', inline-font-files('pictos/pictos-web.woff', woff, 'pictos/pictos-web.ttf', truetype,'pictos/pictos-web.svg', svg));\n</pre>\n\n\n<p>The first parameter is the name of the font face, which must match the name\nyou use as the CSS font-family. The second parameter uses the inline-font-files\nCompass function to base64-encode the font file inline into the CSS file with\npaths to the WOFF, TTF, and SVG versions of the font files.</p>\n\n<p>A good list of other icon fonts (some paid and some free) is available at\n<a href=\"http://css-tricks.com/flat-icons-icon-fonts/\">http://css-tricks.com/flat-icons-icon-fonts/</a></p>\n\n<p>Sencha Touch 1 and 2 used <code>-webkit-maask</code> to display and style fonts.\nUnfortuantely, although <code>webkit-mask</code> functionality works on most WebKit browsers,\nit does not work on non-WebKit browsers like Internet Explorer.\nSencha Touch 2.2 fully supports IE10, so <code>webkit-mask</code> is no longer an option.</p>\n\n<h3 id='theming-section-creating-a-custom-font'>Creating a Custom Font</h3>\n\n<p>There are many tools available online to create your own icon font.\nA good example of this is <a href=\"http://icomoon.io/app/\">icomoon</a>.</p>\n\n<p>Advantages of creating your own icon font:</p>\n\n<ul>\n<li>You can pick the icons you want to use in your application.</li>\n<li>Because you are choosing your own icons, you can reduce the file size of the font,\nwhich in turn reduces the size of your stylesheet.</li>\n</ul>\n\n","title":"Theming"});