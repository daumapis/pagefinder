Ext.data.JsonP.whats_new({"guide":"<h1 id='whats_new-section-what-s-new-in-sencha-touch'>What's New in Sencha Touch</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/whats_new-section-welcome-to-sencha-touch'>Welcome to Sencha Touch</a></li>\n<li><a href='#!/guide/whats_new-section-sencha-touch-2-2-features'>Sencha Touch 2.2 Features</a></li>\n<li><a href='#!/guide/whats_new-section-sencha-touch-2-1-features'>Sencha Touch 2.1 Features</a></li>\n<li><a href='#!/guide/whats_new-section-smaller-faster-layout-engine'>Smaller, Faster Layout Engine</a></li>\n<li><a href='#!/guide/whats_new-section-stronger-smarter-core'>Stronger, Smarter Core</a></li>\n<li><a href='#!/guide/whats_new-section-faster-start-up-time'>Faster Start up Time</a></li>\n<li><a href='#!/guide/whats_new-section-class-system-and-apps'>Class System and Apps</a></li>\n<li><a href='#!/guide/whats_new-section-config-driven-components'>Config-driven Components</a></li>\n<li><a href='#!/guide/whats_new-section-improved-mvc-capabilities'>Improved MVC Capabilities</a></li>\n<li><a href='#!/guide/whats_new-section-much-better-android-support'>Much Better Android Support</a></li>\n<li><a href='#!/guide/whats_new-section-native-packaging'>Native Packaging</a></li>\n<li><a href='#!/guide/whats_new-section-improved-docs'>Improved Docs</a></li>\n</ol>\n</div>\n\n<p>The following is a list of the new features and functionalities in Sencha Touch.</p>\n\n<h2 id='whats_new-section-welcome-to-sencha-touch'>Welcome to Sencha Touch</h2>\n\n<p>Sencha Touch provides an HTML5 mobile framework.</p>\n\n<h2 id='whats_new-section-sencha-touch-2-2-features'>Sencha Touch 2.2 Features</h2>\n\n<p>Sencha Touch 2.2 adds support for new tools and devices, and\nlets you measure performance with these features:</p>\n\n<ul>\n<li>Sencha Cmd 3.1 and Sencha Architect 2.2 support</li>\n<li>Internet Explorer 10 support</li>\n<li>Microsoft Surface Pro and Surface RT, Windows Phone, and BlackBerry 10 support</li>\n<li>Icon font-face support</li>\n<li>Platform detection in app.json for changing themes</li>\n<li>Platform config option to change settings by platform or theme</li>\n<li>Performance improvements</li>\n<li>Measure performance with the showfps URL option</li>\n<li>Experimental support for FireFox 21, Opera Mobile, Chrome pixel mouse and touch inputs</li>\n<li>User interface changes</li>\n</ul>\n\n\n<p>In addition, extensive bug fixes were made - see the Release Notes.</p>\n\n<p><a name=\"whats_new-section-SenCmd\"></a></p>\n\n<h3 id='whats_new-section-sencha-cmd-3-1-and-sencha-architect-2-2-support'>Sencha Cmd 3.1 and Sencha Architect 2.2 Support</h3>\n\n<p>Sencha Touch 2.2 requires the use of the free\n<a href=\"http://www.sencha.com/products/sencha-cmd/download\">Sencha Cmd 3.1</a> or later to package apps.\nSencha Architect 2.2 also requires use of Sencha Cmd 3.1 or later.\nSencha Cmd 3.1 removes the need to have Sass and Compass installed on your computer\nsince it uses its own bundled version of Sass and Compass. Sencha Cmd 3.1 also provides Ant\nand the new \"sencha app package\" command for packaging apps for mobile devices.</p>\n\n<p><a name=\"whats_new-section-ie10\"></a></p>\n\n<h3 id='whats_new-section-internet-explorer-10-support'>Internet Explorer 10 Support</h3>\n\n<p>Internet Explorer 10 has its own theme or can use the Sencha Touch theme. In the\ncurrent release, Back and Forward buttons with an arrow on the left or right side\nof the button render without the arrow. Buttons with arrows are only supported on\nWebKit browsers.</p>\n\n<p><a name=\"whats_new-section-SurfBB\"></a></p>\n\n<h3 id='whats_new-section-surface-and-blackberry-10-support'>Surface and BlackBerry 10 Support</h3>\n\n<p>Sencha Touch features now work on the Microsoft Surface Pro, Surface RT,\nWindows Phone, and BlackBerry 10 devices.\nTheming support is provided for the BlackBerry 10.\nIf you are developing an app for Windows Phone or BlackBerry, you can\nuse <a href=\"http://cordova.apache.org/\">Apache Cordova</a> to package your app.</p>\n\n<p><a name=\"whats_new-section-fontface\"></a></p>\n\n<h3 id='whats_new-section-css3-font-face-support'>CSS3 font-face Support</h3>\n\n<p>Sencha Touch no longer uses WebKit masks for icons and now uses CSS3 font-face.\nThis change significantly improves performance and scaling.\nThis change requires that you convert your icons into a font file and specify\nthe file's URL in your application's CSS file. For more information on font-face,\nsee <a href=\"http://www.w3.org/TR/css3-fonts/#font-face-rule\">font-face rule</a>. The font\nfile can be True Type (TTF), Scaled Vector Graphics (SVG), or Embedded Open Type (EOT).\nThe web provides many tools for converting a PNG graphics file to a font, for example,\n<a href=\"http://pictos.cc/server/\">Pictos Server</a> or <a href=\"https://pictonic.co/\">Pictonic</a>.</p>\n\n<p>You can view the <a href=\"http://www.pictos.cc/font\">Sencha Touch icon font</a> library. Sencha\nlets you use this font in your apps free of charge and without a license. The font is\nprovided in the Touch 2.2 and later software download distribution as an EOT, SVG,\nand TTF file. For Android and iOS apps, Touch automatically\nadds the font library to an app you package using Sencha Cmd 3.1 or later.</p>\n\n<p><a name=\"whats_new-section-platdet\"></a></p>\n\n<h3 id='whats_new-section-platform-detection-for-themes'>Platform Detection for Themes</h3>\n\n<p>Sencha Touch uses a whitelist to detect platforms for themes the same as ExtJS.\nThe Touch theme feature is also implemented similar to ExtJS except that\nTouch has three schemes, plus the base class, and you can add custom themes.\nTouch themes are .scss files generated through use of Sass.\n<a href=\"http://www.sencha.com/products/sencha-cmd/download\">Sencha Cmd 3.1</a> installs Ruby and Sass for you.</p>\n\n<p>Touch also differs from ExtJS by its\nDOM structure that enables Touch to normalize browser access for its\ncomponents.</p>\n\n<p>Touch detects the Chrome, Safari, and iOS platforms, and loads the Touch theme as\nthe default. If you don't specify a theme, Touch uses its default theme. Touch\nprovides three themes: Sencha Touch default, IE10, and BlackBerry 10. These\nthemes extend the Touch base class, which is in the base.scss file in the software\ndistribution.</p>\n\n<p>To create a theme, install <a href=\"http://www.sencha.com/products/sencha-cmd/download\">Sencha Cmd 3.1</a>\nor later on your computer.\nIn Touch, creating a theme means creating a .scss file using Sass. You can\nalso extend any of the Touch themes or the base class.</p>\n\n<p>For more information on creating and using themes, see\n<a href=\"http://docs.sencha.com/ext-js/4-2/#!/guide/theming\">Theming</a> in the ExtJS\ndocumentation.</p>\n\n<p><strong>Note</strong> As you add settings to your theme, test their performance using the\nnew showfps feature, which lets you view how theme settings\naffect animation performance.</p>\n\n<p>The Touch software distribution provides SCSS files for the themes that you can\nuse or change as required. Each component has its own CSS file, for example button.css\nis for buttons and a button.js file that accompanies use of the component.\nUpdate a Ruby Sass file which generates the CSS file.</p>\n\n<p><strong>Important</strong> To use themes, in Touch 2.2, you must include the base class\nbase.css file in your app in addition to your theme's CSS file.</p>\n\n<p><a name=\"whats_new-section-platfig\"></a></p>\n\n<h3 id='whats_new-section-platform-config-option'>Platform Config Option</h3>\n\n<p>This feature lets you modify configuration options depending on what platform you're\nusing or what theme you're using. An example of how to use this is for scaling graphics\nbetween operating system types. For example, for a Mac you may want to use one size\ngraphic and on Windows another size.</p>\n\n<p><a name=\"whats_new-section-perfim\"></a></p>\n\n<h3 id='whats_new-section-performance-improvements'>Performance Improvements</h3>\n\n<p>The following improvements in Sencha Touch 2.2 improve performance:</p>\n\n<ul>\n<li>Scrolling indicators were refactored and cleaned up to use the fastest indicators\nfor each platform</li>\n<li>Translatable class logic improved and optimized for each platform</li>\n<li>ScrollPosition has been updated to use a static large size instead of having to dynamically\nmeasure, which improves performance for Android 2 and Internet Explorer - this is created as\na 1 million-pixel &lt;div&gt; block to ensure any scroll component fits</li>\n<li>Unified animation queue that improves performance - use the <a href=\"#!/guide/whats_new-section-showfps\">showfps option</a>\nfeature to measure the performance</li>\n<li>Updated the List component to improve performance</li>\n<li>Memory leak issues for charts and datastore were fixed</li>\n<li>Chart type renderers APIs were unified and cleaned up so that all follow the same pattern.\nAnyone who created customizations for the chart APIs may need to rework their code accordingly</li>\n<li>Refactored the pullToRefresh plugin for performance and consistency</li>\n</ul>\n\n\n<p><a name=\"whats_new-section-showfps\"></a></p>\n\n<h3 id='whats_new-section-measure-animation-performance-with-the-showfps-url-option'>Measure Animation Performance With the showfps URL Option</h3>\n\n<p>For debug applications, add the <strong>?showfps</strong> option to the URL to display animation\nperformance information about an application where you enable debugging. The display lists the\nperformance information for the average number of animation transitions, the current transition,\nand the minimum and maximum values for the last 1000 transitions. This feature is very\nuseful for performance testing and creating benchmark data.</p>\n\n<p><strong>Note</strong> The showfps feature only works on browsers that support requestAnimationFrame. If\nthe browser only uses a fallback, a message appears indicating that the results may not be\naccurate. In this case, the information measures how fast JavaScript runs the app, but\nnot how fast the animation draws on the screen. The native Android browsers do not support\nrequestAnimationFrame, but Chrome for Android does. In the case of the native Android\nbrowsers, the animation sampling is based on 60 frames per second; however, this does not\nnecessarily mean the browser is painting the animation at that rate. Browsers that do support\nrequestAnimationFrame means that the showfps feature accurately measures each animation\ndisplay.</p>\n\n<p><a name=\"whats_new-section-exsu\"></a></p>\n\n<h3 id='whats_new-section-experimental-support'>Experimental Support</h3>\n\n<p>Sencha Touch provides support for FireFox 21, which is currently in Alpha.\nThe Mozilla implementation is experimental and relies on the FireFox 21 nightly\nbuild of its flexible box implementation. Sencha is working with the Mozilla team on known\nlayout issues. Most examples run, including the Kitchen Sink, but your mileage\nmay vary. Do not use this for production applications.</p>\n\n<p><a name=\"whats_new-section-uichg\"></a></p>\n\n<h3 id='whats_new-section-user-interface-changes'>User Interface Changes</h3>\n\n<p>The IconMask option in the button components was removed. In Touch 2.2, icons no longer use masks,\nthey now use the CSS3 font-face feature.</p>\n\n<h2 id='whats_new-section-sencha-touch-2-1-features'>Sencha Touch 2.1 Features</h2>\n\n<p>Version 2.1 focused on performance -- getting apps running fast\nand on as many devices as possible. In Sencha Touch\nversion 2.1 and later, apps start much faster, provide a much\nsnappier initial rendering and layout, and redraw immediately\nwhen users rotate a device.</p>\n\n<p>Version 2.1 enhancements:</p>\n\n<ul>\n<li><p>A new scroller, optimized for each platform and faster than\never - especially on Android devices. The rendering process has\nbeen optimized and components are reused without the app having\nto instantiate new ones.</p></li>\n<li><p>Many innovations that originate from Ext JS 4, including the\nnew advanced class system, reconfigurable components, and\nimprovements to the application architecture.</p></li>\n<li><p>Increased support for a wider range of devices with reduced\nemphasis on WebKit, and a more robust platform that can be used\nto support more devices over time.</p></li>\n</ul>\n\n\n<h2 id='whats_new-section-smaller-faster-layout-engine'>Smaller, Faster Layout Engine</h2>\n\n<p>Sencha Touch offers a very flexible layout system that makes it\neasy to lay out apps for a variety of device shapes and sizes.\nSencha Touch provides a layout engine that runs much more like\nthe browser's optimized CSS engine, the result being enormously\nimproved performance in several key areas:</p>\n\n<ul>\n<li>On startup, apps render and display faster</li>\n<li>After rotating the device, updating the screen is much faster</li>\n<li>The layout engine is much smaller, resulting in faster download</li>\n</ul>\n\n\n<p>The result is a massively improved layout performance across all\nareas. Screens are rendered much faster when navigating through\nthe app, giving a much more fluid experience. The most dramatic\nimprovement occurs when a device changes orientation. To see the\nimpact of the new layout engine, here is a video of the\nKitchen Sink buttons example running on the current Sencha Touch\nand its previous version, slowed down to one quarter of its normal speed:</p>\n\n<p><a style=\"text-align: center\" href=\"http://vimeo.com/30296006\"><img src=\"http://img1.sencha.com/files/misc/20111010-video-full.jpg\" /></a></p>\n\n<h2 id='whats_new-section-stronger-smarter-core'>Stronger, Smarter Core</h2>\n\n<p>Sencha Touch benefits from a development environment that is shared\nwith Ext JS. The Ext JS 4 environment brought about a range of new\ninnovations that are now also build into Sencha Touch, including the following:</p>\n\n<ul>\n<li>Upgraded class system with support for dynamic loading and dependencies</li>\n<li>Support for class configurations as a core construct, which provides you\nwith free getter and setter functions and results in a clean, consistent API</li>\n</ul>\n\n\n<h2 id='whats_new-section-faster-start-up-time'>Faster Start up Time</h2>\n\n<p>Sencha Touch starts faster, providing nearly\na 10% to 25% improvement in startup time on a range of devices, as\nshown when testing the Kitchen Sink example. On many devices, the\ncurrent version of Sencha Touch loads apps almost a second faster\nthan previous versions:</p>\n\n<p><img src=\"http://img1.sencha.com/files/misc/20111010-sencha-touch-startup-times.png\" /></p>\n\n<h2 id='whats_new-section-class-system-and-apps'>Class System and Apps</h2>\n\n<p>Sencha Touch uses the powerful new class system derived from Ext JS 4.\nThis provides all the benefits of dynamic loading, intelligent builds\nthat only include the classes you use, mixins, configurations, and all\nthe other features of the new engine. For details, see the\n<a href=\"#!/guide/class_system\">How to use classes in Sencha Touch 2</a> guide.</p>\n\n<p>Sencha Touch also includes the Ext JS 4 application architecture,\nincluding ComponentQuery and production build support.</p>\n\n<h2 id='whats_new-section-config-driven-components'>Config-driven Components</h2>\n\n<p>One of the benefits of the Sencha Touch class system is its\n'configs', simple properties that automatically provide getter and\nsetter functions, defaults, and more.</p>\n\n<p>Sencha Touch makes use of the config system throughout the framework.\nWhenever you see a config on a class, you already know that you can\nreconfigure it at any time (even after it is rendered). Even better,\nbecause the config's setter name always follows the same pattern,\nyou already know what function to call.</p>\n\n<p>For example, you can give a <a href=\"#!/api/Ext.field.Text\" rel=\"Ext.field.Text\" class=\"docClass\">Text Field</a> a label\nwhen you instantiate it and can easily change it later:</p>\n\n<pre><code>var text = <a href=\"#!/api/Ext-method-create\" rel=\"Ext-method-create\" class=\"docClass\">Ext.create</a>('<a href=\"#!/api/Ext.field.Text\" rel=\"Ext.field.Text\" class=\"docClass\">Ext.form.Text</a>', {\n    label: 'My Field'\n});\n\n//anything we can configure also has a setter function\n//its name always follows the setConfigName pattern\ntext.setLabel('Another Field');\n</code></pre>\n\n<p>Configs are an important enhancement because they give classes a very\nclean API. For each class, everything you see in the 'Config options'\nsection in the API documentation is a true config, complete with\nstandardized getter and setter functions.</p>\n\n<p>For a full overview of the new capabilities see the\n<a href=\"#!/guide/class_system\">Class System guide</a>.</p>\n\n<h2 id='whats_new-section-improved-mvc-capabilities'>Improved MVC Capabilities</h2>\n\n<p>Sencha Touch provides a simple way to organize your application\nbased on the Model View Controller (MVC) paradigm and incorporates\nfull history support, a powerful way to control Components,\nand a powerful way to customize your application for\ndifferent screen sizes.</p>\n\n<p>In addition, the data package has been ported to use the\nnew class system, making it much more flexible and improving\nperformance. For a full overview on the MVC improvements in\nSencha Touch see the following guides:</p>\n\n<ul>\n<li><a href=\"#!/guide/apps_intro\">Intro to Applications</a></li>\n<li><a href=\"#!/guide/profiles\">Profiles</a></li>\n<li><a href=\"#!/guide/controllers\">Controllers</a></li>\n<li><a href=\"#!/guide/history_support\">History Support</a></li>\n</ul>\n\n\n<h2 id='whats_new-section-much-better-android-support'>Much Better Android Support</h2>\n\n<p>Sencha Touch provides Android performance enhancements for\nscrolling and animation, and an optimized mechanism for\nachieving both smooth scrolling and fast, fluid animations,\nas illustrated by the following video that demonstrates\nTouch v1 versus v2 performance improvements on Android devices:</p>\n\n<p><a style=\"text-align: center\" href=\"http://vimeo.com/30324079\"><img src=\"http://img1.sencha.com/files/misc/20111010-video-sm.jpg\" /></a></p>\n\n<h2 id='whats_new-section-native-packaging'>Native Packaging</h2>\n\n<p>Sencha Touch makes it easy to build and deploy apps to both the\nGoogle Play store and the Apple App Store. The Sencha Cmd utility, which\nis available for Mac OS X and Windows, provides the packaging\ncapabilities as well as new APIs to access native device functionality.\nFor all the details on how to use the new packaging capabilities,\nsee <a href=\"#!/guide/native_packaging\">Native Packaging guides</a>.</p>\n\n<p>If you are developing an app for Windows Phone or BlackBerry, you can\nuse <a href=\"http://cordova.apache.org/\">Apache Cordova</a> to package your app.</p>\n\n<h2 id='whats_new-section-improved-docs'>Improved Docs</h2>\n\n<p>Sencha Touch features excellent documentation in the API reference documentation,\nwhich include live examples that you can run from within your browser\nto let you see (and even modify) the example code. Touch also\nbrings all of the Sass variables for each component into the API docs,\nmaking it much easier to see the items that you can customize.</p>\n\n<p>The Sencha Touch <a href=\"#!/guide\">guides</a> have been updated and refreshed.\nWe provide guides that explain core concepts such as layouts, components,\nand classes, and others that cover how to use components such as tab panels,\nforms, and carousels. The documentation also includes a new\nGetting Started guide that takes you through building your first app from scratch.</p>\n","title":"What's new in Sencha Touch"});